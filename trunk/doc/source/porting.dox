/*
porting.txt
===========
23-Jul-99   floh    created
16-Dec-00   floh    updated
*/
/**
@page porting Porting the Nebula Device

This is a rough porting guide to Nebula.


   - @ref porting_platforms "Supported platforms"
   - @ref porting_compilers "Supported compilers"
   - @ref porting_known_problems "Known problems"
   - Do the porting work:
      - @ref porting_build_system "Modifying the build system"
      - @ref porting_kernel "Porting the kernel"
      - @ref porting_class_package "Compiling the Nebula class package"
      - @ref porting_gfx "Implement or port a gfx server"
      - @ref porting_input "Implement or port an input server"
      - @ref porting_audio "Implement or port audio server"
      - @ref porting_script "Implement a new script server"
      - @ref porting_tcl "Make sure there's a working Tcl8.x implementation"

@section porting_platforms Platforms supported:

Nebula currently runs on the following platforms:

    - x86 Linux 2.x with glibc, XFree86, Mesa
    - Win95/98/2000/XP with DirectX 8 and optionally OpenGL
    - WinNT with OpenGL


@section porting_compilers Compilers supported:

   - Linux: gcc 2.9.5, gcc 2.9.6
   - MacOS X's gcc 3.1
   - Win32: MS Visual-C 6, MS Visual C++ .NET 


@section porting_known_problems Known problems:

   - There will be endian problems in the bitmap loader code if
     the host cpu has different endianess then x86.

   - The macros that identify a platform in Makefiles and source
     headers are not very clever.
     Currently there are only @c __WIN32__, @c  __LINUX__, @c __MACOSX__
     for platform and @c __VC__ and @c __GNUC__ for compiler identification.
     @c __LINUX__ is sometimes used instead of "anything else then WIN32",
     so there may be some changes needed when defining new platform macros.

@section porting_build_system Porting the build system

The Nebula build system consists of:

   - .pak files that define and describe modules and the information
     needed to build them.
   - A set of TCL scripts that process those files and turn out the
     platform-specific build scripts or files.

The starting point for the build system is simply:

@verbatim
> cd code/src
> tclsh updsrc.tcl
@endverbatim

Depending on the compiler and the environment on the target platform, the
work may be simple or complex.  If @c make is being used, then the port
can simply generate a correct makefile.  This is currently done in
@c 'bin/makeunix.tcl'.  For an IDE, you'll want to look at @c 'bin/makedsw.tcl'
or @c 'bin/makesln.tcl' which generate IDE files for MicroSoft's Visual C++
6 and 7 respectively.

One caveat is that a source tree that has been run through @c updsrc.tcl
should then be buildable on all supported platforms without re-running
@c updsrc.tcl.

@section porting_kernel Porting the kernel

Kernel sources are in 'code/src/kernel' and 'code/inc/kernel'.
To compile the kernel shared library, do a 'make debug nkernel'.

The Nebula kernel requires the following features supported by
the host environment for a trivial port:

- ANSI C++ compatibility
  
- a realtime clock with at least 1/1000 sec resolution:
   - Win32: QueryPerformanceCounter()
   - Linux: gettimeofday()
   - kernel classes: nTimeServer

- a multithreading system:
   - Win32: Win32-Threads, Mutexes, Events
   - Linux: POSIX threads
   - kernel classes: nThread, nMutex, nEvent

- AF_INET sockets:
   - Win32: winsock 1.x
   - Linux: standard socket calls
   - kernel classes: nIpcClient, nIpcServer

- directory and other file system functions:
   - There's a wrapper class for walking filesystem directories,
   - since there's no standard ANSI-C way of doing this.
   - Win32: FindFirstFile(), FindNextFile()...
   - Linux: opendir(), readdir()...
   - kernel classes: nDir, nFileServer2, nDirectory, nFile

- a dll loader:
   - Win32: LoadLibrary()
   - Linux: dlopen()...
   - kernel functions: n_dllopen(), n_dllclose(), n_dllsymbol()

- A way to detect which path an executable has been
  started from. The current code is Win32/Linux specific
  and does some dirty hacks, see nFileServer::initHomeAssign() in
  'code/src/kernel/nfile_assigns.cc' for details

Once the kernel compiles, you can do a first test with the 
Nebula shell:

@verbatim
> nsh
/> new nroot test
/> test.getcmds
/> test.getversion
/> test.getclass
/> exit
@endverbatim


@section porting_class_package Compiling the Nebula class package:

This should require no porting work:

@verbatim
> make nnebula
@endverbatim

When it has compiled test with nsh and create an object of
a class from the nnebula package:

@verbatim
> nsh
/> new n3dnode test
/> test.txyz 1 2 3
/> test.gett
/> exit
@endverbatim

(this creates a 3d node and translates it to (x=1,y=2,z=3), the
@c 'gett' command returns the current position).


@section porting_gfx Porting a gfx server:

There are currently 2 gfx server classes, nD3D8Server sits on top
of Direct3D 8, nGlServer sits on top of OpenGL 1.1 with GLX or WGL
as the window system interface.

To compile the OpenGL and Direct3D class packages, type:

@verbatim
> make nopengl
> make ndirect3d
@endverbatim

To support a completely new 3d API one has to write 3 classes:
the gfx server itself (nD3D8Server, nGlServer), a texture object
wrapper (nD3D8Texture, nGlTexture) and a vertex buffer wrapper
(nd3dvbuffer, nGlBbuffer). I would advice not to start a completely
new implementation, since the gfx server API is in flux.

Fortunately OpenGL is supported on most mainstream platforms, so a
completely new implementation should not be necessary.
Instead the nglserver code can be extended to work with more
window systems.

The main chunk of window system dependent code is in
'code/src/gfx/ngl_xdisp.cc' for GLX and 'code/src/gfx/ngl_windisp.cc'
for WGL. There are some other bits and pieces throughout the nglserver
code inside @c #ifdef @c __WIN32__ and @c #ifdef @c __LINUX__ statements you
have to be careful about.


@section porting_audio Port or implement an audio server

This is currently in flux and may be changing from the current implementation
to one based upon OpenAL.  This would have the beneficial effect of easing
portability work in this area.

@section porting_input Porting an input server:

Conceptually, the Nebula input server is a collection point
for input events. Input events can be fed into the input server
from anywhere. For instance, the current gfx servers are feeding
keyboard and mouse input from the window system into the Nebula
input event queue, because only gfx server has complete control
over its window.

Support for specific input devices is best done through subclassing
ninputserver, unless the implementation would be cleaner or
more efficient otherwise.

Currently there are 2 special input servers, the ndxinputserver
sits on top of DirectInput V6, the nlxinputserver supports
Linux joystick devices. The latter is much smaller and easier
to understand, so you should probably use nlxinputserver
as a starting point (see 'code/src/input/').


@section porting_script Implementing a new script server:

Writing a new script server is not required to get Nebula running
on another platform. If the standard scripting language Tcl is not
supported it may be better to get Tcl running first, since there are
so many existing Nebula scripts written in Tcl.

The script server translates between Nebula's internal
command format and a specific scripting language. Specifically,
script statements need to be translated into nCmd objects, and
back. See the ntclserver sources under 'code/src/script/' for
details.

Also note that the object persistency mechanism (== object
serialization) uses the script server as filter to generate
human readable serialized object files.


@section porting_tcl Make sure that TCL 8.4 runs

...

*/
/*
---
EOF
*/
